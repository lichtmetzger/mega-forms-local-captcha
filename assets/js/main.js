/* global jQuery, mflcTrans */
// Wait for the document to be ready
jQuery( document ).ready( function ( $ ) {
	// Listen for a click on the .mf-captcha-regenerate element
	$( '.mf-captcha-regenerate' ).on( 'click', function () {
		// Make a REST request to the specified URL
		$.ajax( {
			url: window.location.origin + '/wp-json/mega-forms/v1/get-captcha/',
			method: 'GET',
			dataType: 'json',
			success( data ) {
				// Check if the REST request was successful
				if ( data && data.image_base64 ) {
					// Replace the current captcha image with the autogenerated one
					$( '.mf-captcha-image' ).attr( 'src', data.image_base64 );
				} else {
					// Handle the case when the REST request fails or doesn't return the expected data
					$( '.error-response' ).text( data.message );
				}

				// Replace the audio file if we got one
				if ( data && data.mp3_base64 ) {
					const playButtonString = mflcTrans.read_captcha;

					$( '.mf-captcha-play-audio' ).html(
						'<audio id="captcha-player" src="data:audio/mp3;base64,' +
							data.mp3_base64 +
							'" type="audio/mp3"></audio>' +
							'<div class="play-button" onclick="document.getElementById(\'captcha-player\').play()">' +
							playButtonString +
							'</div>'
					);
				}
			},
			error( xhr, textStatus, errorThrown ) {
				// Handle the case when the REST request encounters an error
				let errorMessage = '';
				if ( xhr.status ) {
					errorMessage += 'Status Code: ' + xhr.status + '. ';
				}
				if ( errorThrown ) {
					errorMessage += 'Error: ' + errorThrown;
				}
				// Display the error message in the .error-response div
				$( '.error-response' ).text( errorMessage );
			},
		} );
	} );
} );
